@using SvxlinkManager.Domain.Entities;
@using System.Globalization
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<ChannelsChoose> Loc

<div class="alert alert-primary" role="alert">
  @AlertHeader
</div>

<EditForm Model="@InstallerModel" OnValidSubmit="()=>OnSubmit.InvokeAsync(InstallationStatus.DefaultChannel)">
  <FluentValidator TValidator="ChannelChooseValidator" />

  <div class="form-row">
    <div class="form-group col-md-6">
      <label data-toggle="tooltip" title="@Loc["CallSignToolTip"]">@Loc["CallSignLabel"]</label>
      <InputText @bind-Value="InstallerModel.CallSign" type="text" class="form-control" id="CallSign" placeholder="@Loc["CallSignPlaceHolder"]" />
      <ValidationMessage For="@(() => InstallerModel.CallSign)" />
    </div>
    <div class="form-group col-md-6">
      <label data-toggle="tooltip" title="@Loc["AnnonceCallSignToolTip"]">@Loc["AnnonceCallSignLabel"]</label>
      <InputText @bind-Value="InstallerModel.AnnonceCallSign" type="text" class="form-control" id="AnnonceCallSign" placeholder="@Loc["AnnonceCallSignPlaceHolder"]" />
      <ValidationMessage For="@(() => InstallerModel.AnnonceCallSign)" />
    </div>
  </div>

  <div class="form-row">
    <div class="form-group">
      <ValidationMessage For="@(() => InstallerModel.Channels)" />
      @foreach (var channel in InstallerModel.Channels)
      {
        <div class="form-check form-check-inline">
          <div class="pretty p-default p-curve p-bigger">
            @if (InstallerModel.ChannelsToPreserved.Contains(channel))
            {
              <input type="checkbox" checked @onchange="e => AddRemoveChannel(channel, e)" />
            }
            else
            {
              <input type="checkbox" @onchange="e => AddRemoveChannel(channel, e)" />
            }

            <div class="state">
              <label>@channel.Name</label>
            </div>
          </div>
        </div>
      }
    </div>
  </div>

  <button class="btn btn-primary" type="button" role="button" @onclick="()=>OnSubmit.InvokeAsync(InstallationStatus.Security)">@Loc["BtnPreview"]</button> <button class="btn btn-primary" type="submit">@Loc["BtnNext"]</button>
</EditForm>

@code {
  [Parameter]
  public InstallerModel InstallerModel { get; set; }

  [Parameter]
  public EventCallback<InstallationStatus> OnSubmit { get; set; }

  public void AddRemoveChannel(SvxlinkChannel channel, ChangeEventArgs e)
  {
    if ((bool)e.Value)
      InstallerModel.ChannelsToDelete.Remove(channel);
    else
      InstallerModel.ChannelsToDelete.Add(channel);

  }

  public MarkupString AlertHeader => new MarkupString(Loc["AlertHeader"]);

}