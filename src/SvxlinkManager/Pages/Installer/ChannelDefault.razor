@using SvxlinkManager.Models;
@using System.Globalization
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<ChannelDefault> Loc

<div class="alert alert-primary" role="alert">
  @AlertHeader
</div>

<EditForm Model="@InstallerModel" OnValidSubmit="()=>OnSubmit.InvokeAsync(InstallationStatus.RadioProfile)">
  <FluentValidator TValidator="ChannelDefaultValidator" />

  <div class="form-row">
    <div class="form-group">
      <ValidationMessage For="@(() => InstallerModel.DefaultChannel)" />
      @foreach (var channel in InstallerModel.ChannelsToPreserved)
      {
        <div class="form-check form-check-inline">
          <div class="pretty p-default p-curve p-bigger">
            @if (channel == InstallerModel.DefaultChannel)
            {
              <input type="radio" checked name="defaultChannel" @onchange="e => SetDefaultChannel(channel, e)" />
            }
            else
            {
              <input type="radio" name="defaultChannel" @onchange="e => SetDefaultChannel(channel, e)" />
            }

            <div class="state">
              <label>@channel.Name</label>
            </div>
          </div>
        </div>
      }
    </div>
  </div>

  <button class="btn btn-primary" type="button" role="button" @onclick="()=>OnSubmit.InvokeAsync(InstallationStatus.Channel)">@Loc["BtnPreview"]</button> <button class="btn btn-primary" type="submit">@Loc["BtnNext"]</button>
</EditForm>

@code {
  [Parameter]
  public InstallerModel InstallerModel { get; set; }

  [Parameter]
  public EventCallback<InstallationStatus> OnSubmit { get; set; }

  public void SetDefaultChannel(SvxlinkChannel channel, ChangeEventArgs e)
  {
    if (((string)e.Value).Equals("on"))
      InstallerModel.DefaultChannel = channel;

  }

  public MarkupString AlertHeader => new MarkupString(Loc["AlertHeader"]);

}